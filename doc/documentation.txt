~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|                    Implementation                       |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-*** I made the following changes to the Minix source code  ***- 


1) Firstly I declared two library procedure inside the file /usr/src/include/unistd.h.

   ********************************
   int create_semaphore (int, int, int);
   ********************************


   ***************************
   int up_semaphore(int, int);
   ***************************

2) Now declare the definition of the function in the file mysemaphore.h which is to created inside the 
directory of /usr/src/include


 Here symbolic constants like INHERIT, NOT_INHERIT are passed as argument. See man pages for details. 



3) Now assign call number to the system call in the file /usr/src/include/minix/callnr.h

    ****************************
    # define CREATE_SEMAPHORE 56
    ****************************


    ************************
    # define UP_SEMAPHORE 58
    ************************

4) Now register the system call in /usr/src/servers/pm/proto.h

   ******************************
   int do_create_semaphore(void);
   int do_up_semaphore(void);
   ******************************

5) Also register it in /usr/src/servers/pm/table.c

   ***********************************************
   int do_create_semaphore,	/* 56 = unused	*/
   int do_up_semaphore,	/* 58 = unused	*/
   ***********************************************

6) Now to handle the system call, include the definition in /usr/src/servers/pm/misc.c

7) Make changes in main.c to initialize the Semaphore structure.

8) Make changes in forkexit.c for inheriting semaphore.

9) Create a 'c' program to create semaphore and perform various operations

10) Implement a 'c' program to test Dining philospher problem. 
